Hi, TongjiUniversity

本程序基于 RSA 加密算法原理，实现了从密钥生成、明文加密到密文解密的完整流程，同时包含了 RSA 算法所需的各类基础支撑算法，可作为 RSA 加密原理的演示工具。程序整体遵循作业要求中对 RSA 算法的定义，限定 n=pq（p、q 为大素数）在 16-bit 范围内，确保在演示原理的同时兼顾运行效率。
在密钥生成环节，程序能够自动生成两个不同的素数 p 和 q（范围为 08000H 到 0FFFFH），计算 n=pq 作为公钥和私钥的公共模数，以及 φ=(p-1)(q-1)；随后选择奇数 e=257（0101H）作为公钥，通过扩展欧几里得算法求解满足 de -kφ=1 的私钥 d，最终生成公钥对 (e, n) 和私钥对 (d, n)，并将密钥分别存储到 private.key 和 public.key 文件中，方便后续加解密调用。
在加密环节，程序支持对文本文件（如 org.txt）进行加密。加密过程中，会将明文按 3 字节为一组进行转换（不足 3 字节时进行补零处理），将每组明文转换为 32 位整数后，调用快速幂算法计算 m^e mod n，得到密文整数，再将密文整数按 4 字节为一组存储到密文文件（如 org.txt.rsa）中。同时，程序支持对包含中英文的明文（如 “Hello, World! & 你好，世界！”）进行处理，确保多字符类型的兼容性。
在解密环节，程序读取密文文件中的 4 字节密文组，转换为 32 位整数后，调用快速幂算法计算 c^d mod n，得到明文整数，再将明文整数按 3 字节为一组转换为原始明文，存储到解密文件（如 org.txt.rsa.dec）中，实现密文到明文的还原。此外，程序还提供了独立的测试函数，可分别对最大公约数（gcd）、扩展最大公约数（ext_gcd）、快速幂（fast_pow）、素数检测（judge_prime）、素数生成（generate_prime）和密钥生成（generate_key）等功能进行单独测试，方便验证各模块的正确性。
